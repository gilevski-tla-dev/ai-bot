package handlers

import (
	"fmt"
	"log"
	"time"

	"telegram-bot/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// CommandHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã Telegram –±–æ—Ç–∞
type CommandHandler struct {
	userRepo models.UserRepository
}

// NewCommandHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
func NewCommandHandler(userRepo models.UserRepository) *CommandHandler {
	return &CommandHandler{
		userRepo: userRepo,
	}
}

// HandleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â—É—é –∫–æ–º–∞–Ω–¥—É
func (h *CommandHandler) HandleCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	if message.Command() == "start" {
		h.handleStartCommand(bot, message)
	}
}

// handleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (h *CommandHandler) handleStartCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	user := &models.User{
		UserID:    int64(message.From.ID),
		Username:  message.From.UserName,
		FirstName: message.From.FirstName,
		LastName:  message.From.LastName,
		CreatedAt: time.Now(),
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	if err := h.userRepo.Save(user); err != nil {
		log.Printf("Error saving user: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
		bot.Send(msg)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	welcomeText := fmt.Sprintf(
		"–ü—Ä–∏–≤–µ—Ç, %s! üëã\n\n"+
			"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞! –Ø —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n"+
			"–í–∞—à ID: %d\n"+
			"–ò–º—è: %s",
		user.FirstName,
		user.UserID,
		user.FirstName,
	)

	if user.LastName != "" {
		welcomeText += fmt.Sprintf(" %s", user.LastName)
	}

	if user.Username != "" {
		welcomeText += fmt.Sprintf("\nUsername: @%s", user.Username)
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, welcomeText)
	bot.Send(msg)
}
