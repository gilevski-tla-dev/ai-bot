services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db-prod
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: telegram_bot
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "127.0.0.1:5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  telegram-bot:
    build:
      context: ./telegram-bot
      dockerfile: Dockerfile
    container_name: telegram-bot-prod
    restart: unless-stopped
    env_file:
      - .env
    environment:
      TELEGRAM_BOT_TOKEN: ${BOT_TOKEN}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: telegram_bot
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-prod
    restart: unless-stopped
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "127.0.0.1:5051:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: telegram-api-prod
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: telegram_bot
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      TELEGRAM_BOT_TOKEN: ${BOT_TOKEN}
      API_PORT: 8080
      AI_MODEL: deepseek/deepseek-chat-v3.1:free
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: nginx-proxy-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - api
      - mini-app
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    container_name: certbot-prod
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN}
    profiles:
      - ssl-init

  mini-app:
    build:
      context: ./mini-app
      dockerfile: Dockerfile
    container_name: mini-app-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  pgadmin-data:
    driver: local
